
001HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016dc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800179c  0800179c  0001179c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017b8  080017b8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080017b8  080017b8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017b8  080017b8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017b8  080017b8  000117b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017bc  080017bc  000117bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080017c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080017c4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080017c4  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002fc3  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c78  00000000  00000000  00022fef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003a0  00000000  00000000  00023c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000318  00000000  00000000  00024008  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000122be  00000000  00000000  00024320  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003d84  00000000  00000000  000365de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000710f1  00000000  00000000  0003a362  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ab453  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b28  00000000  00000000  000ab4d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001784 	.word	0x08001784

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001784 	.word	0x08001784

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa08 	bl	8000638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f804 	bl	8000234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f85e 	bl	80002ec <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000230:	e7fe      	b.n	8000230 <main+0x10>
	...

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b095      	sub	sp, #84	; 0x54
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	2418      	movs	r4, #24
 800023c:	193b      	adds	r3, r7, r4
 800023e:	0018      	movs	r0, r3
 8000240:	2338      	movs	r3, #56	; 0x38
 8000242:	001a      	movs	r2, r3
 8000244:	2100      	movs	r1, #0
 8000246:	f001 fa95 	bl	8001774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	0018      	movs	r0, r3
 800024e:	2314      	movs	r3, #20
 8000250:	001a      	movs	r2, r3
 8000252:	2100      	movs	r1, #0
 8000254:	f001 fa8e 	bl	8001774 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000258:	4b22      	ldr	r3, [pc, #136]	; (80002e4 <SystemClock_Config+0xb0>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a22      	ldr	r2, [pc, #136]	; (80002e8 <SystemClock_Config+0xb4>)
 800025e:	401a      	ands	r2, r3
 8000260:	4b20      	ldr	r3, [pc, #128]	; (80002e4 <SystemClock_Config+0xb0>)
 8000262:	2180      	movs	r1, #128	; 0x80
 8000264:	0109      	lsls	r1, r1, #4
 8000266:	430a      	orrs	r2, r1
 8000268:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026a:	0021      	movs	r1, r4
 800026c:	187b      	adds	r3, r7, r1
 800026e:	2202      	movs	r2, #2
 8000270:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000272:	187b      	adds	r3, r7, r1
 8000274:	2201      	movs	r2, #1
 8000276:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000278:	187b      	adds	r3, r7, r1
 800027a:	2210      	movs	r2, #16
 800027c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027e:	187b      	adds	r3, r7, r1
 8000280:	2202      	movs	r2, #2
 8000282:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000284:	187b      	adds	r3, r7, r1
 8000286:	2200      	movs	r2, #0
 8000288:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 800028a:	187b      	adds	r3, r7, r1
 800028c:	2280      	movs	r2, #128	; 0x80
 800028e:	0312      	lsls	r2, r2, #12
 8000290:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000292:	187b      	adds	r3, r7, r1
 8000294:	2280      	movs	r2, #128	; 0x80
 8000296:	0412      	lsls	r2, r2, #16
 8000298:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029a:	187b      	adds	r3, r7, r1
 800029c:	0018      	movs	r0, r3
 800029e:	f000 fcc7 	bl	8000c30 <HAL_RCC_OscConfig>
 80002a2:	1e03      	subs	r3, r0, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x76>
  {
    Error_Handler();
 80002a6:	f000 f913 	bl	80004d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	220f      	movs	r2, #15
 80002ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2203      	movs	r2, #3
 80002b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2200      	movs	r2, #0
 80002ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2200      	movs	r2, #0
 80002c0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2200      	movs	r2, #0
 80002c6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	2101      	movs	r1, #1
 80002cc:	0018      	movs	r0, r3
 80002ce:	f001 f87f 	bl	80013d0 <HAL_RCC_ClockConfig>
 80002d2:	1e03      	subs	r3, r0, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80002d6:	f000 f8fb 	bl	80004d0 <Error_Handler>
  }
}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	46bd      	mov	sp, r7
 80002de:	b015      	add	sp, #84	; 0x54
 80002e0:	bd90      	pop	{r4, r7, pc}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	40007000 	.word	0x40007000
 80002e8:	ffffe7ff 	.word	0xffffe7ff

080002ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ec:	b590      	push	{r4, r7, lr}
 80002ee:	b08b      	sub	sp, #44	; 0x2c
 80002f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	2414      	movs	r4, #20
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	0018      	movs	r0, r3
 80002f8:	2314      	movs	r3, #20
 80002fa:	001a      	movs	r2, r3
 80002fc:	2100      	movs	r1, #0
 80002fe:	f001 fa39 	bl	8001774 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000302:	4b6e      	ldr	r3, [pc, #440]	; (80004bc <MX_GPIO_Init+0x1d0>)
 8000304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000306:	4b6d      	ldr	r3, [pc, #436]	; (80004bc <MX_GPIO_Init+0x1d0>)
 8000308:	2101      	movs	r1, #1
 800030a:	430a      	orrs	r2, r1
 800030c:	62da      	str	r2, [r3, #44]	; 0x2c
 800030e:	4b6b      	ldr	r3, [pc, #428]	; (80004bc <MX_GPIO_Init+0x1d0>)
 8000310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000312:	2201      	movs	r2, #1
 8000314:	4013      	ands	r3, r2
 8000316:	613b      	str	r3, [r7, #16]
 8000318:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031a:	4b68      	ldr	r3, [pc, #416]	; (80004bc <MX_GPIO_Init+0x1d0>)
 800031c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800031e:	4b67      	ldr	r3, [pc, #412]	; (80004bc <MX_GPIO_Init+0x1d0>)
 8000320:	2102      	movs	r1, #2
 8000322:	430a      	orrs	r2, r1
 8000324:	62da      	str	r2, [r3, #44]	; 0x2c
 8000326:	4b65      	ldr	r3, [pc, #404]	; (80004bc <MX_GPIO_Init+0x1d0>)
 8000328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800032a:	2202      	movs	r2, #2
 800032c:	4013      	ands	r3, r2
 800032e:	60fb      	str	r3, [r7, #12]
 8000330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000332:	4b62      	ldr	r3, [pc, #392]	; (80004bc <MX_GPIO_Init+0x1d0>)
 8000334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000336:	4b61      	ldr	r3, [pc, #388]	; (80004bc <MX_GPIO_Init+0x1d0>)
 8000338:	2104      	movs	r1, #4
 800033a:	430a      	orrs	r2, r1
 800033c:	62da      	str	r2, [r3, #44]	; 0x2c
 800033e:	4b5f      	ldr	r3, [pc, #380]	; (80004bc <MX_GPIO_Init+0x1d0>)
 8000340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000342:	2204      	movs	r2, #4
 8000344:	4013      	ands	r3, r2
 8000346:	60bb      	str	r3, [r7, #8]
 8000348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800034a:	4b5c      	ldr	r3, [pc, #368]	; (80004bc <MX_GPIO_Init+0x1d0>)
 800034c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800034e:	4b5b      	ldr	r3, [pc, #364]	; (80004bc <MX_GPIO_Init+0x1d0>)
 8000350:	2180      	movs	r1, #128	; 0x80
 8000352:	430a      	orrs	r2, r1
 8000354:	62da      	str	r2, [r3, #44]	; 0x2c
 8000356:	4b59      	ldr	r3, [pc, #356]	; (80004bc <MX_GPIO_Init+0x1d0>)
 8000358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800035a:	2280      	movs	r2, #128	; 0x80
 800035c:	4013      	ands	r3, r2
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin, GPIO_PIN_RESET);
 8000362:	4957      	ldr	r1, [pc, #348]	; (80004c0 <MX_GPIO_Init+0x1d4>)
 8000364:	23a0      	movs	r3, #160	; 0xa0
 8000366:	05db      	lsls	r3, r3, #23
 8000368:	2200      	movs	r2, #0
 800036a:	0018      	movs	r0, r3
 800036c:	f000 fc1c 	bl	8000ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin, GPIO_PIN_RESET);
 8000370:	4b54      	ldr	r3, [pc, #336]	; (80004c4 <MX_GPIO_Init+0x1d8>)
 8000372:	2200      	movs	r2, #0
 8000374:	2107      	movs	r1, #7
 8000376:	0018      	movs	r0, r3
 8000378:	f000 fc16 	bl	8000ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA15_RESERVED_Pin PA12_RESERVED_Pin PA1_RESERVED_Pin */
  GPIO_InitStruct.Pin = PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin;
 800037c:	193b      	adds	r3, r7, r4
 800037e:	4a50      	ldr	r2, [pc, #320]	; (80004c0 <MX_GPIO_Init+0x1d4>)
 8000380:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000382:	193b      	adds	r3, r7, r4
 8000384:	2201      	movs	r2, #1
 8000386:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000388:	193b      	adds	r3, r7, r4
 800038a:	2200      	movs	r2, #0
 800038c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800038e:	193b      	adds	r3, r7, r4
 8000390:	2202      	movs	r2, #2
 8000392:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000394:	193a      	adds	r2, r7, r4
 8000396:	23a0      	movs	r3, #160	; 0xa0
 8000398:	05db      	lsls	r3, r3, #23
 800039a:	0011      	movs	r1, r2
 800039c:	0018      	movs	r0, r3
 800039e:	f000 fa85 	bl	80008ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3_RESERVED_Pin */
  GPIO_InitStruct.Pin = PB3_RESERVED_Pin;
 80003a2:	0021      	movs	r1, r4
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2208      	movs	r2, #8
 80003a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2202      	movs	r2, #2
 80003ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b0:	187b      	adds	r3, r7, r1
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	2203      	movs	r2, #3
 80003ba:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(PB3_RESERVED_GPIO_Port, &GPIO_InitStruct);
 80003c2:	000c      	movs	r4, r1
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	4a40      	ldr	r2, [pc, #256]	; (80004c8 <MX_GPIO_Init+0x1dc>)
 80003c8:	0019      	movs	r1, r3
 80003ca:	0010      	movs	r0, r2
 80003cc:	f000 fa6e 	bl	80008ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4_RESERVED_Pin PB1_RESERVED_Pin PB0_RESERVED_Pin */
  GPIO_InitStruct.Pin = PB4_RESERVED_Pin|PB1_RESERVED_Pin|PB0_RESERVED_Pin;
 80003d0:	0021      	movs	r1, r4
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	2213      	movs	r2, #19
 80003d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003d8:	187b      	adds	r3, r7, r1
 80003da:	4a3c      	ldr	r2, [pc, #240]	; (80004cc <MX_GPIO_Init+0x1e0>)
 80003dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	187b      	adds	r3, r7, r1
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e4:	000c      	movs	r4, r1
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	4a37      	ldr	r2, [pc, #220]	; (80004c8 <MX_GPIO_Init+0x1dc>)
 80003ea:	0019      	movs	r1, r3
 80003ec:	0010      	movs	r0, r2
 80003ee:	f000 fa5d 	bl	80008ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC13_RESERVED_Pin;
 80003f2:	0021      	movs	r1, r4
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	2280      	movs	r2, #128	; 0x80
 80003f8:	0192      	lsls	r2, r2, #6
 80003fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003fc:	000c      	movs	r4, r1
 80003fe:	193b      	adds	r3, r7, r4
 8000400:	4a32      	ldr	r2, [pc, #200]	; (80004cc <MX_GPIO_Init+0x1e0>)
 8000402:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	193b      	adds	r3, r7, r4
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PC13_RESERVED_GPIO_Port, &GPIO_InitStruct);
 800040a:	193b      	adds	r3, r7, r4
 800040c:	4a2d      	ldr	r2, [pc, #180]	; (80004c4 <MX_GPIO_Init+0x1d8>)
 800040e:	0019      	movs	r1, r3
 8000410:	0010      	movs	r0, r2
 8000412:	f000 fa4b 	bl	80008ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1_RESERVED_Pin PC0_RESERVED_Pin PC2_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin;
 8000416:	193b      	adds	r3, r7, r4
 8000418:	2207      	movs	r2, #7
 800041a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041c:	193b      	adds	r3, r7, r4
 800041e:	2201      	movs	r2, #1
 8000420:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000422:	193b      	adds	r3, r7, r4
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000428:	193b      	adds	r3, r7, r4
 800042a:	2202      	movs	r2, #2
 800042c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800042e:	193b      	adds	r3, r7, r4
 8000430:	4a24      	ldr	r2, [pc, #144]	; (80004c4 <MX_GPIO_Init+0x1d8>)
 8000432:	0019      	movs	r1, r3
 8000434:	0010      	movs	r0, r2
 8000436:	f000 fa39 	bl	80008ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7_RESERVED_Pin PA6_RESERVED_Pin */
  GPIO_InitStruct.Pin = PA7_RESERVED_Pin|PA6_RESERVED_Pin;
 800043a:	193b      	adds	r3, r7, r4
 800043c:	22c0      	movs	r2, #192	; 0xc0
 800043e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000440:	193b      	adds	r3, r7, r4
 8000442:	2202      	movs	r2, #2
 8000444:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	193b      	adds	r3, r7, r4
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800044c:	193b      	adds	r3, r7, r4
 800044e:	2203      	movs	r2, #3
 8000450:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000452:	193b      	adds	r3, r7, r4
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000458:	193a      	adds	r2, r7, r4
 800045a:	23a0      	movs	r3, #160	; 0xa0
 800045c:	05db      	lsls	r3, r3, #23
 800045e:	0011      	movs	r1, r2
 8000460:	0018      	movs	r0, r3
 8000462:	f000 fa23 	bl	80008ac <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000466:	0021      	movs	r1, r4
 8000468:	187b      	adds	r3, r7, r1
 800046a:	220c      	movs	r2, #12
 800046c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800046e:	187b      	adds	r3, r7, r1
 8000470:	2202      	movs	r2, #2
 8000472:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000474:	187b      	adds	r3, r7, r1
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2203      	movs	r2, #3
 800047e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2204      	movs	r2, #4
 8000484:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000486:	187a      	adds	r2, r7, r1
 8000488:	23a0      	movs	r3, #160	; 0xa0
 800048a:	05db      	lsls	r3, r3, #23
 800048c:	0011      	movs	r1, r2
 800048e:	0018      	movs	r0, r3
 8000490:	f000 fa0c 	bl	80008ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000494:	2200      	movs	r2, #0
 8000496:	2100      	movs	r1, #0
 8000498:	2005      	movs	r0, #5
 800049a:	f000 f9d5 	bl	8000848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800049e:	2005      	movs	r0, #5
 80004a0:	f000 f9e7 	bl	8000872 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2100      	movs	r1, #0
 80004a8:	2007      	movs	r0, #7
 80004aa:	f000 f9cd 	bl	8000848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80004ae:	2007      	movs	r0, #7
 80004b0:	f000 f9df 	bl	8000872 <HAL_NVIC_EnableIRQ>

}
 80004b4:	46c0      	nop			; (mov r8, r8)
 80004b6:	46bd      	mov	sp, r7
 80004b8:	b00b      	add	sp, #44	; 0x2c
 80004ba:	bd90      	pop	{r4, r7, pc}
 80004bc:	40021000 	.word	0x40021000
 80004c0:	00009002 	.word	0x00009002
 80004c4:	50000800 	.word	0x50000800
 80004c8:	50000400 	.word	0x50000400
 80004cc:	10110000 	.word	0x10110000

080004d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
	...

080004dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <HAL_MspInit+0x24>)
 80004e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <HAL_MspInit+0x24>)
 80004e6:	2101      	movs	r1, #1
 80004e8:	430a      	orrs	r2, r1
 80004ea:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <HAL_MspInit+0x24>)
 80004ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80004f0:	4b03      	ldr	r3, [pc, #12]	; (8000500 <HAL_MspInit+0x24>)
 80004f2:	2180      	movs	r1, #128	; 0x80
 80004f4:	0549      	lsls	r1, r1, #21
 80004f6:	430a      	orrs	r2, r1
 80004f8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40021000 	.word	0x40021000

08000504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000508:	46c0      	nop			; (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000512:	e7fe      	b.n	8000512 <HardFault_Handler+0x4>

08000514 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}

0800051e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800052c:	f000 f8ce 	bl	80006cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000530:	46c0      	nop			; (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800053a:	2001      	movs	r0, #1
 800053c:	f000 fb52 	bl	8000be4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000540:	2002      	movs	r0, #2
 8000542:	f000 fb4f 	bl	8000be4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000550:	2010      	movs	r0, #16
 8000552:	f000 fb47 	bl	8000be4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000556:	2380      	movs	r3, #128	; 0x80
 8000558:	019b      	lsls	r3, r3, #6
 800055a:	0018      	movs	r0, r3
 800055c:	f000 fb42 	bl	8000be4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000560:	46c0      	nop			; (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <SystemInit+0x64>)
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	4b16      	ldr	r3, [pc, #88]	; (80005cc <SystemInit+0x64>)
 8000572:	2180      	movs	r1, #128	; 0x80
 8000574:	0049      	lsls	r1, r1, #1
 8000576:	430a      	orrs	r2, r1
 8000578:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <SystemInit+0x64>)
 800057c:	68da      	ldr	r2, [r3, #12]
 800057e:	4b13      	ldr	r3, [pc, #76]	; (80005cc <SystemInit+0x64>)
 8000580:	4913      	ldr	r1, [pc, #76]	; (80005d0 <SystemInit+0x68>)
 8000582:	400a      	ands	r2, r1
 8000584:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <SystemInit+0x64>)
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <SystemInit+0x64>)
 800058c:	4911      	ldr	r1, [pc, #68]	; (80005d4 <SystemInit+0x6c>)
 800058e:	400a      	ands	r2, r1
 8000590:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <SystemInit+0x64>)
 8000594:	689a      	ldr	r2, [r3, #8]
 8000596:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <SystemInit+0x64>)
 8000598:	2101      	movs	r1, #1
 800059a:	438a      	bics	r2, r1
 800059c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <SystemInit+0x64>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <SystemInit+0x64>)
 80005a4:	490c      	ldr	r1, [pc, #48]	; (80005d8 <SystemInit+0x70>)
 80005a6:	400a      	ands	r2, r1
 80005a8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <SystemInit+0x64>)
 80005ac:	68da      	ldr	r2, [r3, #12]
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <SystemInit+0x64>)
 80005b0:	490a      	ldr	r1, [pc, #40]	; (80005dc <SystemInit+0x74>)
 80005b2:	400a      	ands	r2, r1
 80005b4:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80005b6:	4b05      	ldr	r3, [pc, #20]	; (80005cc <SystemInit+0x64>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <SystemInit+0x78>)
 80005be:	2280      	movs	r2, #128	; 0x80
 80005c0:	0512      	lsls	r2, r2, #20
 80005c2:	609a      	str	r2, [r3, #8]
#endif
}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	40021000 	.word	0x40021000
 80005d0:	88ff400c 	.word	0x88ff400c
 80005d4:	fef6fff6 	.word	0xfef6fff6
 80005d8:	fffbffff 	.word	0xfffbffff
 80005dc:	ff02ffff 	.word	0xff02ffff
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80005e4:	480d      	ldr	r0, [pc, #52]	; (800061c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80005e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80005e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005ea:	e003      	b.n	80005f4 <LoopCopyDataInit>

080005ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80005ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005f2:	3104      	adds	r1, #4

080005f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80005f4:	480b      	ldr	r0, [pc, #44]	; (8000624 <LoopForever+0xa>)
  ldr  r3, =_edata
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <LoopForever+0xe>)
  adds  r2, r0, r1
 80005f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005fc:	d3f6      	bcc.n	80005ec <CopyDataInit>
  ldr  r2, =_sbss
 80005fe:	4a0b      	ldr	r2, [pc, #44]	; (800062c <LoopForever+0x12>)
  b  LoopFillZerobss
 8000600:	e002      	b.n	8000608 <LoopFillZerobss>

08000602 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000602:	2300      	movs	r3, #0
  str  r3, [r2]
 8000604:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000606:	3204      	adds	r2, #4

08000608 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <LoopForever+0x16>)
  cmp  r2, r3
 800060a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800060c:	d3f9      	bcc.n	8000602 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800060e:	f7ff ffab 	bl	8000568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000612:	f001 f88b 	bl	800172c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000616:	f7ff fe03 	bl	8000220 <main>

0800061a <LoopForever>:

LoopForever:
    b LoopForever
 800061a:	e7fe      	b.n	800061a <LoopForever>
   ldr   r0, =_estack
 800061c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8000620:	080017c0 	.word	0x080017c0
  ldr  r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000628:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 800062c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000630:	20000024 	.word	0x20000024

08000634 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000634:	e7fe      	b.n	8000634 <ADC1_COMP_IRQHandler>
	...

08000638 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800063e:	1dfb      	adds	r3, r7, #7
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000644:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <HAL_Init+0x3c>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <HAL_Init+0x3c>)
 800064a:	2140      	movs	r1, #64	; 0x40
 800064c:	430a      	orrs	r2, r1
 800064e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000650:	2000      	movs	r0, #0
 8000652:	f000 f811 	bl	8000678 <HAL_InitTick>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d003      	beq.n	8000662 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800065a:	1dfb      	adds	r3, r7, #7
 800065c:	2201      	movs	r2, #1
 800065e:	701a      	strb	r2, [r3, #0]
 8000660:	e001      	b.n	8000666 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000662:	f7ff ff3b 	bl	80004dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000666:	1dfb      	adds	r3, r7, #7
 8000668:	781b      	ldrb	r3, [r3, #0]
}
 800066a:	0018      	movs	r0, r3
 800066c:	46bd      	mov	sp, r7
 800066e:	b002      	add	sp, #8
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	40022000 	.word	0x40022000

08000678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000680:	230f      	movs	r3, #15
 8000682:	18fb      	adds	r3, r7, r3
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_InitTick+0x50>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	23fa      	movs	r3, #250	; 0xfa
 800068e:	0099      	lsls	r1, r3, #2
 8000690:	0010      	movs	r0, r2
 8000692:	f7ff fd39 	bl	8000108 <__udivsi3>
 8000696:	0003      	movs	r3, r0
 8000698:	0018      	movs	r0, r3
 800069a:	f000 f8fa 	bl	8000892 <HAL_SYSTICK_Config>
 800069e:	1e03      	subs	r3, r0, #0
 80006a0:	d004      	beq.n	80006ac <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 80006a2:	230f      	movs	r3, #15
 80006a4:	18fb      	adds	r3, r7, r3
 80006a6:	2201      	movs	r2, #1
 80006a8:	701a      	strb	r2, [r3, #0]
 80006aa:	e006      	b.n	80006ba <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80006ac:	6879      	ldr	r1, [r7, #4]
 80006ae:	2301      	movs	r3, #1
 80006b0:	425b      	negs	r3, r3
 80006b2:	2200      	movs	r2, #0
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 f8c7 	bl	8000848 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80006ba:	230f      	movs	r3, #15
 80006bc:	18fb      	adds	r3, r7, r3
 80006be:	781b      	ldrb	r3, [r3, #0]
}
 80006c0:	0018      	movs	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	b004      	add	sp, #16
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000000 	.word	0x20000000

080006cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  uwTick++;
 80006d0:	4b03      	ldr	r3, [pc, #12]	; (80006e0 <HAL_IncTick+0x14>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	1c5a      	adds	r2, r3, #1
 80006d6:	4b02      	ldr	r3, [pc, #8]	; (80006e0 <HAL_IncTick+0x14>)
 80006d8:	601a      	str	r2, [r3, #0]
}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000020 	.word	0x20000020

080006e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  return uwTick;
 80006e8:	4b02      	ldr	r3, [pc, #8]	; (80006f4 <HAL_GetTick+0x10>)
 80006ea:	681b      	ldr	r3, [r3, #0]
}
 80006ec:	0018      	movs	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	20000020 	.word	0x20000020

080006f8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	0002      	movs	r2, r0
 8000700:	1dfb      	adds	r3, r7, #7
 8000702:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000704:	1dfb      	adds	r3, r7, #7
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	001a      	movs	r2, r3
 800070a:	231f      	movs	r3, #31
 800070c:	401a      	ands	r2, r3
 800070e:	4b04      	ldr	r3, [pc, #16]	; (8000720 <NVIC_EnableIRQ+0x28>)
 8000710:	2101      	movs	r1, #1
 8000712:	4091      	lsls	r1, r2
 8000714:	000a      	movs	r2, r1
 8000716:	601a      	str	r2, [r3, #0]
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b002      	add	sp, #8
 800071e:	bd80      	pop	{r7, pc}
 8000720:	e000e100 	.word	0xe000e100

08000724 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	0002      	movs	r2, r0
 800072c:	6039      	str	r1, [r7, #0]
 800072e:	1dfb      	adds	r3, r7, #7
 8000730:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b7f      	cmp	r3, #127	; 0x7f
 8000738:	d932      	bls.n	80007a0 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800073a:	4a2f      	ldr	r2, [pc, #188]	; (80007f8 <NVIC_SetPriority+0xd4>)
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	0019      	movs	r1, r3
 8000742:	230f      	movs	r3, #15
 8000744:	400b      	ands	r3, r1
 8000746:	3b08      	subs	r3, #8
 8000748:	089b      	lsrs	r3, r3, #2
 800074a:	3306      	adds	r3, #6
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	18d3      	adds	r3, r2, r3
 8000750:	3304      	adds	r3, #4
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	1dfa      	adds	r2, r7, #7
 8000756:	7812      	ldrb	r2, [r2, #0]
 8000758:	0011      	movs	r1, r2
 800075a:	2203      	movs	r2, #3
 800075c:	400a      	ands	r2, r1
 800075e:	00d2      	lsls	r2, r2, #3
 8000760:	21ff      	movs	r1, #255	; 0xff
 8000762:	4091      	lsls	r1, r2
 8000764:	000a      	movs	r2, r1
 8000766:	43d2      	mvns	r2, r2
 8000768:	401a      	ands	r2, r3
 800076a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	019b      	lsls	r3, r3, #6
 8000770:	22ff      	movs	r2, #255	; 0xff
 8000772:	401a      	ands	r2, r3
 8000774:	1dfb      	adds	r3, r7, #7
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	0018      	movs	r0, r3
 800077a:	2303      	movs	r3, #3
 800077c:	4003      	ands	r3, r0
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000782:	481d      	ldr	r0, [pc, #116]	; (80007f8 <NVIC_SetPriority+0xd4>)
 8000784:	1dfb      	adds	r3, r7, #7
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	001c      	movs	r4, r3
 800078a:	230f      	movs	r3, #15
 800078c:	4023      	ands	r3, r4
 800078e:	3b08      	subs	r3, #8
 8000790:	089b      	lsrs	r3, r3, #2
 8000792:	430a      	orrs	r2, r1
 8000794:	3306      	adds	r3, #6
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	18c3      	adds	r3, r0, r3
 800079a:	3304      	adds	r3, #4
 800079c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800079e:	e027      	b.n	80007f0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a0:	4a16      	ldr	r2, [pc, #88]	; (80007fc <NVIC_SetPriority+0xd8>)
 80007a2:	1dfb      	adds	r3, r7, #7
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	b25b      	sxtb	r3, r3
 80007a8:	089b      	lsrs	r3, r3, #2
 80007aa:	33c0      	adds	r3, #192	; 0xc0
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	589b      	ldr	r3, [r3, r2]
 80007b0:	1dfa      	adds	r2, r7, #7
 80007b2:	7812      	ldrb	r2, [r2, #0]
 80007b4:	0011      	movs	r1, r2
 80007b6:	2203      	movs	r2, #3
 80007b8:	400a      	ands	r2, r1
 80007ba:	00d2      	lsls	r2, r2, #3
 80007bc:	21ff      	movs	r1, #255	; 0xff
 80007be:	4091      	lsls	r1, r2
 80007c0:	000a      	movs	r2, r1
 80007c2:	43d2      	mvns	r2, r2
 80007c4:	401a      	ands	r2, r3
 80007c6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	019b      	lsls	r3, r3, #6
 80007cc:	22ff      	movs	r2, #255	; 0xff
 80007ce:	401a      	ands	r2, r3
 80007d0:	1dfb      	adds	r3, r7, #7
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	0018      	movs	r0, r3
 80007d6:	2303      	movs	r3, #3
 80007d8:	4003      	ands	r3, r0
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007de:	4807      	ldr	r0, [pc, #28]	; (80007fc <NVIC_SetPriority+0xd8>)
 80007e0:	1dfb      	adds	r3, r7, #7
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b25b      	sxtb	r3, r3
 80007e6:	089b      	lsrs	r3, r3, #2
 80007e8:	430a      	orrs	r2, r1
 80007ea:	33c0      	adds	r3, #192	; 0xc0
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	501a      	str	r2, [r3, r0]
}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b003      	add	sp, #12
 80007f6:	bd90      	pop	{r4, r7, pc}
 80007f8:	e000ed00 	.word	0xe000ed00
 80007fc:	e000e100 	.word	0xe000e100

08000800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3b01      	subs	r3, #1
 800080c:	4a0c      	ldr	r2, [pc, #48]	; (8000840 <SysTick_Config+0x40>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d901      	bls.n	8000816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000812:	2301      	movs	r3, #1
 8000814:	e010      	b.n	8000838 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <SysTick_Config+0x44>)
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	3a01      	subs	r2, #1
 800081c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800081e:	2301      	movs	r3, #1
 8000820:	425b      	negs	r3, r3
 8000822:	2103      	movs	r1, #3
 8000824:	0018      	movs	r0, r3
 8000826:	f7ff ff7d 	bl	8000724 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <SysTick_Config+0x44>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <SysTick_Config+0x44>)
 8000832:	2207      	movs	r2, #7
 8000834:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000836:	2300      	movs	r3, #0
}
 8000838:	0018      	movs	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	b002      	add	sp, #8
 800083e:	bd80      	pop	{r7, pc}
 8000840:	00ffffff 	.word	0x00ffffff
 8000844:	e000e010 	.word	0xe000e010

08000848 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	60b9      	str	r1, [r7, #8]
 8000850:	607a      	str	r2, [r7, #4]
 8000852:	210f      	movs	r1, #15
 8000854:	187b      	adds	r3, r7, r1
 8000856:	1c02      	adds	r2, r0, #0
 8000858:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800085a:	68ba      	ldr	r2, [r7, #8]
 800085c:	187b      	adds	r3, r7, r1
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b25b      	sxtb	r3, r3
 8000862:	0011      	movs	r1, r2
 8000864:	0018      	movs	r0, r3
 8000866:	f7ff ff5d 	bl	8000724 <NVIC_SetPriority>
}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b004      	add	sp, #16
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	0002      	movs	r2, r0
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	b25b      	sxtb	r3, r3
 8000884:	0018      	movs	r0, r3
 8000886:	f7ff ff37 	bl	80006f8 <NVIC_EnableIRQ>
}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b002      	add	sp, #8
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	0018      	movs	r0, r3
 800089e:	f7ff ffaf 	bl	8000800 <SysTick_Config>
 80008a2:	0003      	movs	r3, r0
}
 80008a4:	0018      	movs	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	b002      	add	sp, #8
 80008aa:	bd80      	pop	{r7, pc}

080008ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80008c2:	e155      	b.n	8000b70 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2101      	movs	r1, #1
 80008ca:	697a      	ldr	r2, [r7, #20]
 80008cc:	4091      	lsls	r1, r2
 80008ce:	000a      	movs	r2, r1
 80008d0:	4013      	ands	r3, r2
 80008d2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d100      	bne.n	80008dc <HAL_GPIO_Init+0x30>
 80008da:	e146      	b.n	8000b6a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	d003      	beq.n	80008ec <HAL_GPIO_Init+0x40>
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	2b12      	cmp	r3, #18
 80008ea:	d123      	bne.n	8000934 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	08da      	lsrs	r2, r3, #3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3208      	adds	r2, #8
 80008f4:	0092      	lsls	r2, r2, #2
 80008f6:	58d3      	ldr	r3, [r2, r3]
 80008f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	2207      	movs	r2, #7
 80008fe:	4013      	ands	r3, r2
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	220f      	movs	r2, #15
 8000904:	409a      	lsls	r2, r3
 8000906:	0013      	movs	r3, r2
 8000908:	43da      	mvns	r2, r3
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	4013      	ands	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	691a      	ldr	r2, [r3, #16]
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	2107      	movs	r1, #7
 8000918:	400b      	ands	r3, r1
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	409a      	lsls	r2, r3
 800091e:	0013      	movs	r3, r2
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	4313      	orrs	r3, r2
 8000924:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	08da      	lsrs	r2, r3, #3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	3208      	adds	r2, #8
 800092e:	0092      	lsls	r2, r2, #2
 8000930:	6939      	ldr	r1, [r7, #16]
 8000932:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d00b      	beq.n	8000954 <HAL_GPIO_Init+0xa8>
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	2b02      	cmp	r3, #2
 8000942:	d007      	beq.n	8000954 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000948:	2b11      	cmp	r3, #17
 800094a:	d003      	beq.n	8000954 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	2b12      	cmp	r3, #18
 8000952:	d130      	bne.n	80009b6 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	2203      	movs	r2, #3
 8000960:	409a      	lsls	r2, r3
 8000962:	0013      	movs	r3, r2
 8000964:	43da      	mvns	r2, r3
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	4013      	ands	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	68da      	ldr	r2, [r3, #12]
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	409a      	lsls	r2, r3
 8000976:	0013      	movs	r3, r2
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	4313      	orrs	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800098a:	2201      	movs	r2, #1
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	409a      	lsls	r2, r3
 8000990:	0013      	movs	r3, r2
 8000992:	43da      	mvns	r2, r3
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	4013      	ands	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	091b      	lsrs	r3, r3, #4
 80009a0:	2201      	movs	r2, #1
 80009a2:	401a      	ands	r2, r3
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	409a      	lsls	r2, r3
 80009a8:	0013      	movs	r3, r2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	2203      	movs	r2, #3
 80009c2:	409a      	lsls	r2, r3
 80009c4:	0013      	movs	r3, r2
 80009c6:	43da      	mvns	r2, r3
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	2203      	movs	r2, #3
 80009d4:	401a      	ands	r2, r3
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	409a      	lsls	r2, r3
 80009dc:	0013      	movs	r3, r2
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	2203      	movs	r2, #3
 80009f6:	409a      	lsls	r2, r3
 80009f8:	0013      	movs	r3, r2
 80009fa:	43da      	mvns	r2, r3
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	4013      	ands	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	689a      	ldr	r2, [r3, #8]
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	409a      	lsls	r2, r3
 8000a0c:	0013      	movs	r3, r2
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685a      	ldr	r2, [r3, #4]
 8000a1e:	2380      	movs	r3, #128	; 0x80
 8000a20:	055b      	lsls	r3, r3, #21
 8000a22:	4013      	ands	r3, r2
 8000a24:	d100      	bne.n	8000a28 <HAL_GPIO_Init+0x17c>
 8000a26:	e0a0      	b.n	8000b6a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a28:	4b57      	ldr	r3, [pc, #348]	; (8000b88 <HAL_GPIO_Init+0x2dc>)
 8000a2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a2c:	4b56      	ldr	r3, [pc, #344]	; (8000b88 <HAL_GPIO_Init+0x2dc>)
 8000a2e:	2101      	movs	r1, #1
 8000a30:	430a      	orrs	r2, r1
 8000a32:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8000a34:	4a55      	ldr	r2, [pc, #340]	; (8000b8c <HAL_GPIO_Init+0x2e0>)
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	089b      	lsrs	r3, r3, #2
 8000a3a:	3302      	adds	r3, #2
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	589b      	ldr	r3, [r3, r2]
 8000a40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	2203      	movs	r2, #3
 8000a46:	4013      	ands	r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	220f      	movs	r2, #15
 8000a4c:	409a      	lsls	r2, r3
 8000a4e:	0013      	movs	r3, r2
 8000a50:	43da      	mvns	r2, r3
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	4013      	ands	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	23a0      	movs	r3, #160	; 0xa0
 8000a5c:	05db      	lsls	r3, r3, #23
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d01f      	beq.n	8000aa2 <HAL_GPIO_Init+0x1f6>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a4a      	ldr	r2, [pc, #296]	; (8000b90 <HAL_GPIO_Init+0x2e4>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d019      	beq.n	8000a9e <HAL_GPIO_Init+0x1f2>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a49      	ldr	r2, [pc, #292]	; (8000b94 <HAL_GPIO_Init+0x2e8>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d013      	beq.n	8000a9a <HAL_GPIO_Init+0x1ee>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a48      	ldr	r2, [pc, #288]	; (8000b98 <HAL_GPIO_Init+0x2ec>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d00d      	beq.n	8000a96 <HAL_GPIO_Init+0x1ea>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a47      	ldr	r2, [pc, #284]	; (8000b9c <HAL_GPIO_Init+0x2f0>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d007      	beq.n	8000a92 <HAL_GPIO_Init+0x1e6>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a46      	ldr	r2, [pc, #280]	; (8000ba0 <HAL_GPIO_Init+0x2f4>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d101      	bne.n	8000a8e <HAL_GPIO_Init+0x1e2>
 8000a8a:	2305      	movs	r3, #5
 8000a8c:	e00a      	b.n	8000aa4 <HAL_GPIO_Init+0x1f8>
 8000a8e:	2306      	movs	r3, #6
 8000a90:	e008      	b.n	8000aa4 <HAL_GPIO_Init+0x1f8>
 8000a92:	2304      	movs	r3, #4
 8000a94:	e006      	b.n	8000aa4 <HAL_GPIO_Init+0x1f8>
 8000a96:	2303      	movs	r3, #3
 8000a98:	e004      	b.n	8000aa4 <HAL_GPIO_Init+0x1f8>
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	e002      	b.n	8000aa4 <HAL_GPIO_Init+0x1f8>
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e000      	b.n	8000aa4 <HAL_GPIO_Init+0x1f8>
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	2103      	movs	r1, #3
 8000aa8:	400a      	ands	r2, r1
 8000aaa:	0092      	lsls	r2, r2, #2
 8000aac:	4093      	lsls	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ab4:	4935      	ldr	r1, [pc, #212]	; (8000b8c <HAL_GPIO_Init+0x2e0>)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	089b      	lsrs	r3, r3, #2
 8000aba:	3302      	adds	r3, #2
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ac2:	4b38      	ldr	r3, [pc, #224]	; (8000ba4 <HAL_GPIO_Init+0x2f8>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	43da      	mvns	r2, r3
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	2380      	movs	r3, #128	; 0x80
 8000ad8:	025b      	lsls	r3, r3, #9
 8000ada:	4013      	ands	r3, r2
 8000adc:	d003      	beq.n	8000ae6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ae6:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <HAL_GPIO_Init+0x2f8>)
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000aec:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <HAL_GPIO_Init+0x2f8>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	43da      	mvns	r2, r3
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	2380      	movs	r3, #128	; 0x80
 8000b02:	029b      	lsls	r3, r3, #10
 8000b04:	4013      	ands	r3, r2
 8000b06:	d003      	beq.n	8000b10 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b10:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <HAL_GPIO_Init+0x2f8>)
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <HAL_GPIO_Init+0x2f8>)
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	4013      	ands	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685a      	ldr	r2, [r3, #4]
 8000b2a:	2380      	movs	r3, #128	; 0x80
 8000b2c:	035b      	lsls	r3, r3, #13
 8000b2e:	4013      	ands	r3, r2
 8000b30:	d003      	beq.n	8000b3a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <HAL_GPIO_Init+0x2f8>)
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <HAL_GPIO_Init+0x2f8>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	43da      	mvns	r2, r3
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	039b      	lsls	r3, r3, #14
 8000b58:	4013      	ands	r3, r2
 8000b5a:	d003      	beq.n	8000b64 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <HAL_GPIO_Init+0x2f8>)
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	40da      	lsrs	r2, r3
 8000b78:	1e13      	subs	r3, r2, #0
 8000b7a:	d000      	beq.n	8000b7e <HAL_GPIO_Init+0x2d2>
 8000b7c:	e6a2      	b.n	80008c4 <HAL_GPIO_Init+0x18>
  }
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b006      	add	sp, #24
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40010000 	.word	0x40010000
 8000b90:	50000400 	.word	0x50000400
 8000b94:	50000800 	.word	0x50000800
 8000b98:	50000c00 	.word	0x50000c00
 8000b9c:	50001000 	.word	0x50001000
 8000ba0:	50001c00 	.word	0x50001c00
 8000ba4:	40010400 	.word	0x40010400

08000ba8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	0008      	movs	r0, r1
 8000bb2:	0011      	movs	r1, r2
 8000bb4:	1cbb      	adds	r3, r7, #2
 8000bb6:	1c02      	adds	r2, r0, #0
 8000bb8:	801a      	strh	r2, [r3, #0]
 8000bba:	1c7b      	adds	r3, r7, #1
 8000bbc:	1c0a      	adds	r2, r1, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000bc0:	1c7b      	adds	r3, r7, #1
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d004      	beq.n	8000bd2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bc8:	1cbb      	adds	r3, r7, #2
 8000bca:	881a      	ldrh	r2, [r3, #0]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000bd0:	e003      	b.n	8000bda <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000bd2:	1cbb      	adds	r3, r7, #2
 8000bd4:	881a      	ldrh	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b002      	add	sp, #8
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	0002      	movs	r2, r0
 8000bec:	1dbb      	adds	r3, r7, #6
 8000bee:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000bf2:	695b      	ldr	r3, [r3, #20]
 8000bf4:	1dba      	adds	r2, r7, #6
 8000bf6:	8812      	ldrh	r2, [r2, #0]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	d008      	beq.n	8000c0e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000bfe:	1dba      	adds	r2, r7, #6
 8000c00:	8812      	ldrh	r2, [r2, #0]
 8000c02:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c04:	1dbb      	adds	r3, r7, #6
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f000 f807 	bl	8000c1c <HAL_GPIO_EXTI_Callback>
  }
}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	b002      	add	sp, #8
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	40010400 	.word	0x40010400

08000c1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	0002      	movs	r2, r0
 8000c24:	1dbb      	adds	r3, r7, #6
 8000c26:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b002      	add	sp, #8
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c30:	b5b0      	push	{r4, r5, r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d102      	bne.n	8000c44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	f000 fbbc 	bl	80013bc <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c44:	4bc8      	ldr	r3, [pc, #800]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	220c      	movs	r2, #12
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c4e:	4bc6      	ldr	r3, [pc, #792]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000c50:	68da      	ldr	r2, [r3, #12]
 8000c52:	2380      	movs	r3, #128	; 0x80
 8000c54:	025b      	lsls	r3, r3, #9
 8000c56:	4013      	ands	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	4013      	ands	r3, r2
 8000c62:	d100      	bne.n	8000c66 <HAL_RCC_OscConfig+0x36>
 8000c64:	e07e      	b.n	8000d64 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	2b08      	cmp	r3, #8
 8000c6a:	d007      	beq.n	8000c7c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	2b0c      	cmp	r3, #12
 8000c70:	d112      	bne.n	8000c98 <HAL_RCC_OscConfig+0x68>
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	025b      	lsls	r3, r3, #9
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d10d      	bne.n	8000c98 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c7c:	4bba      	ldr	r3, [pc, #744]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	029b      	lsls	r3, r3, #10
 8000c84:	4013      	ands	r3, r2
 8000c86:	d100      	bne.n	8000c8a <HAL_RCC_OscConfig+0x5a>
 8000c88:	e06b      	b.n	8000d62 <HAL_RCC_OscConfig+0x132>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d167      	bne.n	8000d62 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	f000 fb92 	bl	80013bc <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685a      	ldr	r2, [r3, #4]
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	025b      	lsls	r3, r3, #9
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d107      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x84>
 8000ca4:	4bb0      	ldr	r3, [pc, #704]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4baf      	ldr	r3, [pc, #700]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	0249      	lsls	r1, r1, #9
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	e027      	b.n	8000d04 <HAL_RCC_OscConfig+0xd4>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	23a0      	movs	r3, #160	; 0xa0
 8000cba:	02db      	lsls	r3, r3, #11
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d10e      	bne.n	8000cde <HAL_RCC_OscConfig+0xae>
 8000cc0:	4ba9      	ldr	r3, [pc, #676]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4ba8      	ldr	r3, [pc, #672]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000cc6:	2180      	movs	r1, #128	; 0x80
 8000cc8:	02c9      	lsls	r1, r1, #11
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	4ba6      	ldr	r3, [pc, #664]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	4ba5      	ldr	r3, [pc, #660]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000cd4:	2180      	movs	r1, #128	; 0x80
 8000cd6:	0249      	lsls	r1, r1, #9
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	e012      	b.n	8000d04 <HAL_RCC_OscConfig+0xd4>
 8000cde:	4ba2      	ldr	r3, [pc, #648]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	4ba1      	ldr	r3, [pc, #644]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000ce4:	49a1      	ldr	r1, [pc, #644]	; (8000f6c <HAL_RCC_OscConfig+0x33c>)
 8000ce6:	400a      	ands	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	4b9f      	ldr	r3, [pc, #636]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	025b      	lsls	r3, r3, #9
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	4b9b      	ldr	r3, [pc, #620]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b9a      	ldr	r3, [pc, #616]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000cfe:	499c      	ldr	r1, [pc, #624]	; (8000f70 <HAL_RCC_OscConfig+0x340>)
 8000d00:	400a      	ands	r2, r1
 8000d02:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d015      	beq.n	8000d38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0c:	f7ff fcea 	bl	80006e4 <HAL_GetTick>
 8000d10:	0003      	movs	r3, r0
 8000d12:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d14:	e009      	b.n	8000d2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d16:	f7ff fce5 	bl	80006e4 <HAL_GetTick>
 8000d1a:	0002      	movs	r2, r0
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	2b64      	cmp	r3, #100	; 0x64
 8000d22:	d902      	bls.n	8000d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d24:	2303      	movs	r3, #3
 8000d26:	f000 fb49 	bl	80013bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d2a:	4b8f      	ldr	r3, [pc, #572]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	029b      	lsls	r3, r3, #10
 8000d32:	4013      	ands	r3, r2
 8000d34:	d0ef      	beq.n	8000d16 <HAL_RCC_OscConfig+0xe6>
 8000d36:	e015      	b.n	8000d64 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d38:	f7ff fcd4 	bl	80006e4 <HAL_GetTick>
 8000d3c:	0003      	movs	r3, r0
 8000d3e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d40:	e008      	b.n	8000d54 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d42:	f7ff fccf 	bl	80006e4 <HAL_GetTick>
 8000d46:	0002      	movs	r2, r0
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	2b64      	cmp	r3, #100	; 0x64
 8000d4e:	d901      	bls.n	8000d54 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000d50:	2303      	movs	r3, #3
 8000d52:	e333      	b.n	80013bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d54:	4b84      	ldr	r3, [pc, #528]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	029b      	lsls	r3, r3, #10
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	d1f0      	bne.n	8000d42 <HAL_RCC_OscConfig+0x112>
 8000d60:	e000      	b.n	8000d64 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d62:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2202      	movs	r2, #2
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	d100      	bne.n	8000d70 <HAL_RCC_OscConfig+0x140>
 8000d6e:	e098      	b.n	8000ea2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d78:	2220      	movs	r2, #32
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	d009      	beq.n	8000d92 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000d7e:	4b7a      	ldr	r3, [pc, #488]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	4b79      	ldr	r3, [pc, #484]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000d84:	2120      	movs	r1, #32
 8000d86:	430a      	orrs	r2, r1
 8000d88:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	2220      	movs	r2, #32
 8000d8e:	4393      	bics	r3, r2
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	2b04      	cmp	r3, #4
 8000d96:	d005      	beq.n	8000da4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	2b0c      	cmp	r3, #12
 8000d9c:	d13d      	bne.n	8000e1a <HAL_RCC_OscConfig+0x1ea>
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d13a      	bne.n	8000e1a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000da4:	4b70      	ldr	r3, [pc, #448]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2204      	movs	r2, #4
 8000daa:	4013      	ands	r3, r2
 8000dac:	d004      	beq.n	8000db8 <HAL_RCC_OscConfig+0x188>
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d101      	bne.n	8000db8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e301      	b.n	80013bc <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000db8:	4b6b      	ldr	r3, [pc, #428]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	4a6d      	ldr	r2, [pc, #436]	; (8000f74 <HAL_RCC_OscConfig+0x344>)
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	0019      	movs	r1, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	691b      	ldr	r3, [r3, #16]
 8000dc6:	021a      	lsls	r2, r3, #8
 8000dc8:	4b67      	ldr	r3, [pc, #412]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000dce:	4b66      	ldr	r3, [pc, #408]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2209      	movs	r2, #9
 8000dd4:	4393      	bics	r3, r2
 8000dd6:	0019      	movs	r1, r3
 8000dd8:	4b63      	ldr	r3, [pc, #396]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000de0:	f000 fc20 	bl	8001624 <HAL_RCC_GetSysClockFreq>
 8000de4:	0001      	movs	r1, r0
 8000de6:	4b60      	ldr	r3, [pc, #384]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	091b      	lsrs	r3, r3, #4
 8000dec:	220f      	movs	r2, #15
 8000dee:	4013      	ands	r3, r2
 8000df0:	4a61      	ldr	r2, [pc, #388]	; (8000f78 <HAL_RCC_OscConfig+0x348>)
 8000df2:	5cd3      	ldrb	r3, [r2, r3]
 8000df4:	000a      	movs	r2, r1
 8000df6:	40da      	lsrs	r2, r3
 8000df8:	4b60      	ldr	r3, [pc, #384]	; (8000f7c <HAL_RCC_OscConfig+0x34c>)
 8000dfa:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8000dfc:	2513      	movs	r5, #19
 8000dfe:	197c      	adds	r4, r7, r5
 8000e00:	2000      	movs	r0, #0
 8000e02:	f7ff fc39 	bl	8000678 <HAL_InitTick>
 8000e06:	0003      	movs	r3, r0
 8000e08:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000e0a:	197b      	adds	r3, r7, r5
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d047      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8000e12:	2313      	movs	r3, #19
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	e2d0      	b.n	80013bc <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d027      	beq.n	8000e70 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000e20:	4b51      	ldr	r3, [pc, #324]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2209      	movs	r2, #9
 8000e26:	4393      	bics	r3, r2
 8000e28:	0019      	movs	r1, r3
 8000e2a:	4b4f      	ldr	r3, [pc, #316]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e32:	f7ff fc57 	bl	80006e4 <HAL_GetTick>
 8000e36:	0003      	movs	r3, r0
 8000e38:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e3a:	e008      	b.n	8000e4e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e3c:	f7ff fc52 	bl	80006e4 <HAL_GetTick>
 8000e40:	0002      	movs	r2, r0
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d901      	bls.n	8000e4e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e2b6      	b.n	80013bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e4e:	4b46      	ldr	r3, [pc, #280]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2204      	movs	r2, #4
 8000e54:	4013      	ands	r3, r2
 8000e56:	d0f1      	beq.n	8000e3c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e58:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	4a45      	ldr	r2, [pc, #276]	; (8000f74 <HAL_RCC_OscConfig+0x344>)
 8000e5e:	4013      	ands	r3, r2
 8000e60:	0019      	movs	r1, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	021a      	lsls	r2, r3, #8
 8000e68:	4b3f      	ldr	r3, [pc, #252]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	e018      	b.n	8000ea2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e70:	4b3d      	ldr	r3, [pc, #244]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b3c      	ldr	r3, [pc, #240]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	438a      	bics	r2, r1
 8000e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e7c:	f7ff fc32 	bl	80006e4 <HAL_GetTick>
 8000e80:	0003      	movs	r3, r0
 8000e82:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e84:	e008      	b.n	8000e98 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e86:	f7ff fc2d 	bl	80006e4 <HAL_GetTick>
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d901      	bls.n	8000e98 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	e291      	b.n	80013bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e98:	4b33      	ldr	r3, [pc, #204]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2204      	movs	r2, #4
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d1f1      	bne.n	8000e86 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2210      	movs	r2, #16
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	d100      	bne.n	8000eae <HAL_RCC_OscConfig+0x27e>
 8000eac:	e09f      	b.n	8000fee <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d13f      	bne.n	8000f34 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000eb4:	4b2c      	ldr	r3, [pc, #176]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	d005      	beq.n	8000ecc <HAL_RCC_OscConfig+0x29c>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69db      	ldr	r3, [r3, #28]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d101      	bne.n	8000ecc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e277      	b.n	80013bc <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ecc:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	4a2b      	ldr	r2, [pc, #172]	; (8000f80 <HAL_RCC_OscConfig+0x350>)
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	0019      	movs	r1, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eda:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000edc:	430a      	orrs	r2, r1
 8000ede:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ee0:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	021b      	lsls	r3, r3, #8
 8000ee6:	0a19      	lsrs	r1, r3, #8
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	061a      	lsls	r2, r3, #24
 8000eee:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef8:	0b5b      	lsrs	r3, r3, #13
 8000efa:	3301      	adds	r3, #1
 8000efc:	2280      	movs	r2, #128	; 0x80
 8000efe:	0212      	lsls	r2, r2, #8
 8000f00:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000f02:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	091b      	lsrs	r3, r3, #4
 8000f08:	210f      	movs	r1, #15
 8000f0a:	400b      	ands	r3, r1
 8000f0c:	491a      	ldr	r1, [pc, #104]	; (8000f78 <HAL_RCC_OscConfig+0x348>)
 8000f0e:	5ccb      	ldrb	r3, [r1, r3]
 8000f10:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <HAL_RCC_OscConfig+0x34c>)
 8000f14:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000f16:	2513      	movs	r5, #19
 8000f18:	197c      	adds	r4, r7, r5
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f7ff fbac 	bl	8000678 <HAL_InitTick>
 8000f20:	0003      	movs	r3, r0
 8000f22:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000f24:	197b      	adds	r3, r7, r5
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d060      	beq.n	8000fee <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8000f2c:	2313      	movs	r3, #19
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	e243      	b.n	80013bc <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	69db      	ldr	r3, [r3, #28]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d03e      	beq.n	8000fba <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_RCC_OscConfig+0x338>)
 8000f42:	2180      	movs	r1, #128	; 0x80
 8000f44:	0049      	lsls	r1, r1, #1
 8000f46:	430a      	orrs	r2, r1
 8000f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4a:	f7ff fbcb 	bl	80006e4 <HAL_GetTick>
 8000f4e:	0003      	movs	r3, r0
 8000f50:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f52:	e017      	b.n	8000f84 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f54:	f7ff fbc6 	bl	80006e4 <HAL_GetTick>
 8000f58:	0002      	movs	r2, r0
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d910      	bls.n	8000f84 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e22a      	b.n	80013bc <HAL_RCC_OscConfig+0x78c>
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	fffeffff 	.word	0xfffeffff
 8000f70:	fffbffff 	.word	0xfffbffff
 8000f74:	ffffe0ff 	.word	0xffffe0ff
 8000f78:	0800179c 	.word	0x0800179c
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f84:	4bc6      	ldr	r3, [pc, #792]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	d0e1      	beq.n	8000f54 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f90:	4bc3      	ldr	r3, [pc, #780]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	4ac3      	ldr	r2, [pc, #780]	; (80012a4 <HAL_RCC_OscConfig+0x674>)
 8000f96:	4013      	ands	r3, r2
 8000f98:	0019      	movs	r1, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f9e:	4bc0      	ldr	r3, [pc, #768]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fa4:	4bbe      	ldr	r3, [pc, #760]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	0a19      	lsrs	r1, r3, #8
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a1b      	ldr	r3, [r3, #32]
 8000fb0:	061a      	lsls	r2, r3, #24
 8000fb2:	4bbb      	ldr	r3, [pc, #748]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	e019      	b.n	8000fee <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000fba:	4bb9      	ldr	r3, [pc, #740]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	4bb8      	ldr	r3, [pc, #736]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8000fc0:	49b9      	ldr	r1, [pc, #740]	; (80012a8 <HAL_RCC_OscConfig+0x678>)
 8000fc2:	400a      	ands	r2, r1
 8000fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc6:	f7ff fb8d 	bl	80006e4 <HAL_GetTick>
 8000fca:	0003      	movs	r3, r0
 8000fcc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fd0:	f7ff fb88 	bl	80006e4 <HAL_GetTick>
 8000fd4:	0002      	movs	r2, r0
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e1ec      	b.n	80013bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000fe2:	4baf      	ldr	r3, [pc, #700]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	2380      	movs	r3, #128	; 0x80
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4013      	ands	r3, r2
 8000fec:	d1f0      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2208      	movs	r2, #8
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d036      	beq.n	8001066 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d019      	beq.n	8001034 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001000:	4ba7      	ldr	r3, [pc, #668]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8001002:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001004:	4ba6      	ldr	r3, [pc, #664]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8001006:	2101      	movs	r1, #1
 8001008:	430a      	orrs	r2, r1
 800100a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100c:	f7ff fb6a 	bl	80006e4 <HAL_GetTick>
 8001010:	0003      	movs	r3, r0
 8001012:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001016:	f7ff fb65 	bl	80006e4 <HAL_GetTick>
 800101a:	0002      	movs	r2, r0
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e1c9      	b.n	80013bc <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001028:	4b9d      	ldr	r3, [pc, #628]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 800102a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800102c:	2202      	movs	r2, #2
 800102e:	4013      	ands	r3, r2
 8001030:	d0f1      	beq.n	8001016 <HAL_RCC_OscConfig+0x3e6>
 8001032:	e018      	b.n	8001066 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001034:	4b9a      	ldr	r3, [pc, #616]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8001036:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001038:	4b99      	ldr	r3, [pc, #612]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 800103a:	2101      	movs	r1, #1
 800103c:	438a      	bics	r2, r1
 800103e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001040:	f7ff fb50 	bl	80006e4 <HAL_GetTick>
 8001044:	0003      	movs	r3, r0
 8001046:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800104a:	f7ff fb4b 	bl	80006e4 <HAL_GetTick>
 800104e:	0002      	movs	r2, r0
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e1af      	b.n	80013bc <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800105c:	4b90      	ldr	r3, [pc, #576]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 800105e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001060:	2202      	movs	r2, #2
 8001062:	4013      	ands	r3, r2
 8001064:	d1f1      	bne.n	800104a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2204      	movs	r2, #4
 800106c:	4013      	ands	r3, r2
 800106e:	d100      	bne.n	8001072 <HAL_RCC_OscConfig+0x442>
 8001070:	e0af      	b.n	80011d2 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001072:	2323      	movs	r3, #35	; 0x23
 8001074:	18fb      	adds	r3, r7, r3
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800107a:	4b89      	ldr	r3, [pc, #548]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 800107c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	055b      	lsls	r3, r3, #21
 8001082:	4013      	ands	r3, r2
 8001084:	d10a      	bne.n	800109c <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	4b86      	ldr	r3, [pc, #536]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8001088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800108a:	4b85      	ldr	r3, [pc, #532]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	0549      	lsls	r1, r1, #21
 8001090:	430a      	orrs	r2, r1
 8001092:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001094:	2323      	movs	r3, #35	; 0x23
 8001096:	18fb      	adds	r3, r7, r3
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800109c:	4b83      	ldr	r3, [pc, #524]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4013      	ands	r3, r2
 80010a6:	d11a      	bne.n	80010de <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010a8:	4b80      	ldr	r3, [pc, #512]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b7f      	ldr	r3, [pc, #508]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 80010ae:	2180      	movs	r1, #128	; 0x80
 80010b0:	0049      	lsls	r1, r1, #1
 80010b2:	430a      	orrs	r2, r1
 80010b4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010b6:	f7ff fb15 	bl	80006e4 <HAL_GetTick>
 80010ba:	0003      	movs	r3, r0
 80010bc:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010be:	e008      	b.n	80010d2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c0:	f7ff fb10 	bl	80006e4 <HAL_GetTick>
 80010c4:	0002      	movs	r2, r0
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b64      	cmp	r3, #100	; 0x64
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e174      	b.n	80013bc <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d2:	4b76      	ldr	r3, [pc, #472]	; (80012ac <HAL_RCC_OscConfig+0x67c>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4013      	ands	r3, r2
 80010dc:	d0f0      	beq.n	80010c0 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d107      	bne.n	80010fa <HAL_RCC_OscConfig+0x4ca>
 80010ea:	4b6d      	ldr	r3, [pc, #436]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 80010ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010ee:	4b6c      	ldr	r3, [pc, #432]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 80010f0:	2180      	movs	r1, #128	; 0x80
 80010f2:	0049      	lsls	r1, r1, #1
 80010f4:	430a      	orrs	r2, r1
 80010f6:	651a      	str	r2, [r3, #80]	; 0x50
 80010f8:	e031      	b.n	800115e <HAL_RCC_OscConfig+0x52e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10c      	bne.n	800111c <HAL_RCC_OscConfig+0x4ec>
 8001102:	4b67      	ldr	r3, [pc, #412]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8001104:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001106:	4b66      	ldr	r3, [pc, #408]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8001108:	4967      	ldr	r1, [pc, #412]	; (80012a8 <HAL_RCC_OscConfig+0x678>)
 800110a:	400a      	ands	r2, r1
 800110c:	651a      	str	r2, [r3, #80]	; 0x50
 800110e:	4b64      	ldr	r3, [pc, #400]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8001110:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001112:	4b63      	ldr	r3, [pc, #396]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8001114:	4966      	ldr	r1, [pc, #408]	; (80012b0 <HAL_RCC_OscConfig+0x680>)
 8001116:	400a      	ands	r2, r1
 8001118:	651a      	str	r2, [r3, #80]	; 0x50
 800111a:	e020      	b.n	800115e <HAL_RCC_OscConfig+0x52e>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	23a0      	movs	r3, #160	; 0xa0
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	429a      	cmp	r2, r3
 8001126:	d10e      	bne.n	8001146 <HAL_RCC_OscConfig+0x516>
 8001128:	4b5d      	ldr	r3, [pc, #372]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 800112a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800112c:	4b5c      	ldr	r3, [pc, #368]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 800112e:	2180      	movs	r1, #128	; 0x80
 8001130:	00c9      	lsls	r1, r1, #3
 8001132:	430a      	orrs	r2, r1
 8001134:	651a      	str	r2, [r3, #80]	; 0x50
 8001136:	4b5a      	ldr	r3, [pc, #360]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8001138:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800113a:	4b59      	ldr	r3, [pc, #356]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 800113c:	2180      	movs	r1, #128	; 0x80
 800113e:	0049      	lsls	r1, r1, #1
 8001140:	430a      	orrs	r2, r1
 8001142:	651a      	str	r2, [r3, #80]	; 0x50
 8001144:	e00b      	b.n	800115e <HAL_RCC_OscConfig+0x52e>
 8001146:	4b56      	ldr	r3, [pc, #344]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8001148:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800114a:	4b55      	ldr	r3, [pc, #340]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 800114c:	4956      	ldr	r1, [pc, #344]	; (80012a8 <HAL_RCC_OscConfig+0x678>)
 800114e:	400a      	ands	r2, r1
 8001150:	651a      	str	r2, [r3, #80]	; 0x50
 8001152:	4b53      	ldr	r3, [pc, #332]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8001154:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001156:	4b52      	ldr	r3, [pc, #328]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8001158:	4955      	ldr	r1, [pc, #340]	; (80012b0 <HAL_RCC_OscConfig+0x680>)
 800115a:	400a      	ands	r2, r1
 800115c:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d015      	beq.n	8001192 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001166:	f7ff fabd 	bl	80006e4 <HAL_GetTick>
 800116a:	0003      	movs	r3, r0
 800116c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800116e:	e009      	b.n	8001184 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001170:	f7ff fab8 	bl	80006e4 <HAL_GetTick>
 8001174:	0002      	movs	r2, r0
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	4a4e      	ldr	r2, [pc, #312]	; (80012b4 <HAL_RCC_OscConfig+0x684>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e11b      	b.n	80013bc <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001184:	4b46      	ldr	r3, [pc, #280]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8001186:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4013      	ands	r3, r2
 800118e:	d0ef      	beq.n	8001170 <HAL_RCC_OscConfig+0x540>
 8001190:	e014      	b.n	80011bc <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001192:	f7ff faa7 	bl	80006e4 <HAL_GetTick>
 8001196:	0003      	movs	r3, r0
 8001198:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800119a:	e009      	b.n	80011b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800119c:	f7ff faa2 	bl	80006e4 <HAL_GetTick>
 80011a0:	0002      	movs	r2, r0
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	4a43      	ldr	r2, [pc, #268]	; (80012b4 <HAL_RCC_OscConfig+0x684>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e105      	b.n	80013bc <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80011b0:	4b3b      	ldr	r3, [pc, #236]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 80011b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4013      	ands	r3, r2
 80011ba:	d1ef      	bne.n	800119c <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011bc:	2323      	movs	r3, #35	; 0x23
 80011be:	18fb      	adds	r3, r7, r3
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d105      	bne.n	80011d2 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011c6:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 80011c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011ca:	4b35      	ldr	r3, [pc, #212]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 80011cc:	493a      	ldr	r1, [pc, #232]	; (80012b8 <HAL_RCC_OscConfig+0x688>)
 80011ce:	400a      	ands	r2, r1
 80011d0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2220      	movs	r2, #32
 80011d8:	4013      	ands	r3, r2
 80011da:	d049      	beq.n	8001270 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d026      	beq.n	8001232 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80011e4:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	4b2d      	ldr	r3, [pc, #180]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 80011ea:	2101      	movs	r1, #1
 80011ec:	430a      	orrs	r2, r1
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 80011f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011f4:	4b2a      	ldr	r3, [pc, #168]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 80011f6:	2101      	movs	r1, #1
 80011f8:	430a      	orrs	r2, r1
 80011fa:	635a      	str	r2, [r3, #52]	; 0x34
 80011fc:	4b2f      	ldr	r3, [pc, #188]	; (80012bc <HAL_RCC_OscConfig+0x68c>)
 80011fe:	6a1a      	ldr	r2, [r3, #32]
 8001200:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <HAL_RCC_OscConfig+0x68c>)
 8001202:	2180      	movs	r1, #128	; 0x80
 8001204:	0189      	lsls	r1, r1, #6
 8001206:	430a      	orrs	r2, r1
 8001208:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120a:	f7ff fa6b 	bl	80006e4 <HAL_GetTick>
 800120e:	0003      	movs	r3, r0
 8001210:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001214:	f7ff fa66 	bl	80006e4 <HAL_GetTick>
 8001218:	0002      	movs	r2, r0
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e0ca      	b.n	80013bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001226:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2202      	movs	r2, #2
 800122c:	4013      	ands	r3, r2
 800122e:	d0f1      	beq.n	8001214 <HAL_RCC_OscConfig+0x5e4>
 8001230:	e01e      	b.n	8001270 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001232:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8001238:	2101      	movs	r1, #1
 800123a:	438a      	bics	r2, r1
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <HAL_RCC_OscConfig+0x68c>)
 8001240:	6a1a      	ldr	r2, [r3, #32]
 8001242:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <HAL_RCC_OscConfig+0x68c>)
 8001244:	491e      	ldr	r1, [pc, #120]	; (80012c0 <HAL_RCC_OscConfig+0x690>)
 8001246:	400a      	ands	r2, r1
 8001248:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124a:	f7ff fa4b 	bl	80006e4 <HAL_GetTick>
 800124e:	0003      	movs	r3, r0
 8001250:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001254:	f7ff fa46 	bl	80006e4 <HAL_GetTick>
 8001258:	0002      	movs	r2, r0
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e0aa      	b.n	80013bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	2202      	movs	r2, #2
 800126c:	4013      	ands	r3, r2
 800126e:	d1f1      	bne.n	8001254 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001274:	2b00      	cmp	r3, #0
 8001276:	d100      	bne.n	800127a <HAL_RCC_OscConfig+0x64a>
 8001278:	e09f      	b.n	80013ba <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	2b0c      	cmp	r3, #12
 800127e:	d100      	bne.n	8001282 <HAL_RCC_OscConfig+0x652>
 8001280:	e078      	b.n	8001374 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001286:	2b02      	cmp	r3, #2
 8001288:	d159      	bne.n	800133e <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800128a:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <HAL_RCC_OscConfig+0x670>)
 8001290:	490c      	ldr	r1, [pc, #48]	; (80012c4 <HAL_RCC_OscConfig+0x694>)
 8001292:	400a      	ands	r2, r1
 8001294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001296:	f7ff fa25 	bl	80006e4 <HAL_GetTick>
 800129a:	0003      	movs	r3, r0
 800129c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800129e:	e01c      	b.n	80012da <HAL_RCC_OscConfig+0x6aa>
 80012a0:	40021000 	.word	0x40021000
 80012a4:	ffff1fff 	.word	0xffff1fff
 80012a8:	fffffeff 	.word	0xfffffeff
 80012ac:	40007000 	.word	0x40007000
 80012b0:	fffffbff 	.word	0xfffffbff
 80012b4:	00001388 	.word	0x00001388
 80012b8:	efffffff 	.word	0xefffffff
 80012bc:	40010000 	.word	0x40010000
 80012c0:	ffffdfff 	.word	0xffffdfff
 80012c4:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012c8:	f7ff fa0c 	bl	80006e4 <HAL_GetTick>
 80012cc:	0002      	movs	r2, r0
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e070      	b.n	80013bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80012da:	4b3a      	ldr	r3, [pc, #232]	; (80013c4 <HAL_RCC_OscConfig+0x794>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	049b      	lsls	r3, r3, #18
 80012e2:	4013      	ands	r3, r2
 80012e4:	d1f0      	bne.n	80012c8 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012e6:	4b37      	ldr	r3, [pc, #220]	; (80013c4 <HAL_RCC_OscConfig+0x794>)
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	4a37      	ldr	r2, [pc, #220]	; (80013c8 <HAL_RCC_OscConfig+0x798>)
 80012ec:	4013      	ands	r3, r2
 80012ee:	0019      	movs	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f8:	431a      	orrs	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012fe:	431a      	orrs	r2, r3
 8001300:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <HAL_RCC_OscConfig+0x794>)
 8001302:	430a      	orrs	r2, r1
 8001304:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001306:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <HAL_RCC_OscConfig+0x794>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <HAL_RCC_OscConfig+0x794>)
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	0449      	lsls	r1, r1, #17
 8001310:	430a      	orrs	r2, r1
 8001312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff f9e6 	bl	80006e4 <HAL_GetTick>
 8001318:	0003      	movs	r3, r0
 800131a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800131e:	f7ff f9e1 	bl	80006e4 <HAL_GetTick>
 8001322:	0002      	movs	r2, r0
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e045      	b.n	80013bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001330:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <HAL_RCC_OscConfig+0x794>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	049b      	lsls	r3, r3, #18
 8001338:	4013      	ands	r3, r2
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_OscConfig+0x6ee>
 800133c:	e03d      	b.n	80013ba <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800133e:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <HAL_RCC_OscConfig+0x794>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <HAL_RCC_OscConfig+0x794>)
 8001344:	4921      	ldr	r1, [pc, #132]	; (80013cc <HAL_RCC_OscConfig+0x79c>)
 8001346:	400a      	ands	r2, r1
 8001348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134a:	f7ff f9cb 	bl	80006e4 <HAL_GetTick>
 800134e:	0003      	movs	r3, r0
 8001350:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001354:	f7ff f9c6 	bl	80006e4 <HAL_GetTick>
 8001358:	0002      	movs	r2, r0
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e02a      	b.n	80013bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <HAL_RCC_OscConfig+0x794>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	2380      	movs	r3, #128	; 0x80
 800136c:	049b      	lsls	r3, r3, #18
 800136e:	4013      	ands	r3, r2
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0x724>
 8001372:	e022      	b.n	80013ba <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001378:	2b01      	cmp	r3, #1
 800137a:	d101      	bne.n	8001380 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e01d      	b.n	80013bc <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001380:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <HAL_RCC_OscConfig+0x794>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	025b      	lsls	r3, r3, #9
 800138c:	401a      	ands	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001392:	429a      	cmp	r2, r3
 8001394:	d10f      	bne.n	80013b6 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	23f0      	movs	r3, #240	; 0xf0
 800139a:	039b      	lsls	r3, r3, #14
 800139c:	401a      	ands	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d107      	bne.n	80013b6 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	23c0      	movs	r3, #192	; 0xc0
 80013aa:	041b      	lsls	r3, r3, #16
 80013ac:	401a      	ands	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d001      	beq.n	80013ba <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	0018      	movs	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	b00a      	add	sp, #40	; 0x28
 80013c2:	bdb0      	pop	{r4, r5, r7, pc}
 80013c4:	40021000 	.word	0x40021000
 80013c8:	ff02ffff 	.word	0xff02ffff
 80013cc:	feffffff 	.word	0xfeffffff

080013d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d0:	b5b0      	push	{r4, r5, r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e10d      	b.n	8001600 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013e4:	4b88      	ldr	r3, [pc, #544]	; (8001608 <HAL_RCC_ClockConfig+0x238>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2201      	movs	r2, #1
 80013ea:	4013      	ands	r3, r2
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d911      	bls.n	8001416 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f2:	4b85      	ldr	r3, [pc, #532]	; (8001608 <HAL_RCC_ClockConfig+0x238>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2201      	movs	r2, #1
 80013f8:	4393      	bics	r3, r2
 80013fa:	0019      	movs	r1, r3
 80013fc:	4b82      	ldr	r3, [pc, #520]	; (8001608 <HAL_RCC_ClockConfig+0x238>)
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001404:	4b80      	ldr	r3, [pc, #512]	; (8001608 <HAL_RCC_ClockConfig+0x238>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2201      	movs	r2, #1
 800140a:	4013      	ands	r3, r2
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	d001      	beq.n	8001416 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e0f4      	b.n	8001600 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2202      	movs	r2, #2
 800141c:	4013      	ands	r3, r2
 800141e:	d009      	beq.n	8001434 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001420:	4b7a      	ldr	r3, [pc, #488]	; (800160c <HAL_RCC_ClockConfig+0x23c>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	22f0      	movs	r2, #240	; 0xf0
 8001426:	4393      	bics	r3, r2
 8001428:	0019      	movs	r1, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	4b77      	ldr	r3, [pc, #476]	; (800160c <HAL_RCC_ClockConfig+0x23c>)
 8001430:	430a      	orrs	r2, r1
 8001432:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2201      	movs	r2, #1
 800143a:	4013      	ands	r3, r2
 800143c:	d100      	bne.n	8001440 <HAL_RCC_ClockConfig+0x70>
 800143e:	e089      	b.n	8001554 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b02      	cmp	r3, #2
 8001446:	d107      	bne.n	8001458 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001448:	4b70      	ldr	r3, [pc, #448]	; (800160c <HAL_RCC_ClockConfig+0x23c>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	029b      	lsls	r3, r3, #10
 8001450:	4013      	ands	r3, r2
 8001452:	d120      	bne.n	8001496 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e0d3      	b.n	8001600 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b03      	cmp	r3, #3
 800145e:	d107      	bne.n	8001470 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001460:	4b6a      	ldr	r3, [pc, #424]	; (800160c <HAL_RCC_ClockConfig+0x23c>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	049b      	lsls	r3, r3, #18
 8001468:	4013      	ands	r3, r2
 800146a:	d114      	bne.n	8001496 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0c7      	b.n	8001600 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d106      	bne.n	8001486 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001478:	4b64      	ldr	r3, [pc, #400]	; (800160c <HAL_RCC_ClockConfig+0x23c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2204      	movs	r2, #4
 800147e:	4013      	ands	r3, r2
 8001480:	d109      	bne.n	8001496 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e0bc      	b.n	8001600 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001486:	4b61      	ldr	r3, [pc, #388]	; (800160c <HAL_RCC_ClockConfig+0x23c>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4013      	ands	r3, r2
 8001490:	d101      	bne.n	8001496 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e0b4      	b.n	8001600 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001496:	4b5d      	ldr	r3, [pc, #372]	; (800160c <HAL_RCC_ClockConfig+0x23c>)
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	2203      	movs	r2, #3
 800149c:	4393      	bics	r3, r2
 800149e:	0019      	movs	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	4b59      	ldr	r3, [pc, #356]	; (800160c <HAL_RCC_ClockConfig+0x23c>)
 80014a6:	430a      	orrs	r2, r1
 80014a8:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014aa:	f7ff f91b 	bl	80006e4 <HAL_GetTick>
 80014ae:	0003      	movs	r3, r0
 80014b0:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d111      	bne.n	80014de <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014ba:	e009      	b.n	80014d0 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014bc:	f7ff f912 	bl	80006e4 <HAL_GetTick>
 80014c0:	0002      	movs	r2, r0
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	4a52      	ldr	r2, [pc, #328]	; (8001610 <HAL_RCC_ClockConfig+0x240>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e097      	b.n	8001600 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014d0:	4b4e      	ldr	r3, [pc, #312]	; (800160c <HAL_RCC_ClockConfig+0x23c>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	220c      	movs	r2, #12
 80014d6:	4013      	ands	r3, r2
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d1ef      	bne.n	80014bc <HAL_RCC_ClockConfig+0xec>
 80014dc:	e03a      	b.n	8001554 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d111      	bne.n	800150a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014e6:	e009      	b.n	80014fc <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e8:	f7ff f8fc 	bl	80006e4 <HAL_GetTick>
 80014ec:	0002      	movs	r2, r0
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	4a47      	ldr	r2, [pc, #284]	; (8001610 <HAL_RCC_ClockConfig+0x240>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e081      	b.n	8001600 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014fc:	4b43      	ldr	r3, [pc, #268]	; (800160c <HAL_RCC_ClockConfig+0x23c>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	220c      	movs	r2, #12
 8001502:	4013      	ands	r3, r2
 8001504:	2b0c      	cmp	r3, #12
 8001506:	d1ef      	bne.n	80014e8 <HAL_RCC_ClockConfig+0x118>
 8001508:	e024      	b.n	8001554 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d11b      	bne.n	800154a <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001512:	e009      	b.n	8001528 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001514:	f7ff f8e6 	bl	80006e4 <HAL_GetTick>
 8001518:	0002      	movs	r2, r0
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	4a3c      	ldr	r2, [pc, #240]	; (8001610 <HAL_RCC_ClockConfig+0x240>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e06b      	b.n	8001600 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001528:	4b38      	ldr	r3, [pc, #224]	; (800160c <HAL_RCC_ClockConfig+0x23c>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	220c      	movs	r2, #12
 800152e:	4013      	ands	r3, r2
 8001530:	2b04      	cmp	r3, #4
 8001532:	d1ef      	bne.n	8001514 <HAL_RCC_ClockConfig+0x144>
 8001534:	e00e      	b.n	8001554 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001536:	f7ff f8d5 	bl	80006e4 <HAL_GetTick>
 800153a:	0002      	movs	r2, r0
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	4a33      	ldr	r2, [pc, #204]	; (8001610 <HAL_RCC_ClockConfig+0x240>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d901      	bls.n	800154a <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e05a      	b.n	8001600 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800154a:	4b30      	ldr	r3, [pc, #192]	; (800160c <HAL_RCC_ClockConfig+0x23c>)
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	220c      	movs	r2, #12
 8001550:	4013      	ands	r3, r2
 8001552:	d1f0      	bne.n	8001536 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001554:	4b2c      	ldr	r3, [pc, #176]	; (8001608 <HAL_RCC_ClockConfig+0x238>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2201      	movs	r2, #1
 800155a:	4013      	ands	r3, r2
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d211      	bcs.n	8001586 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001562:	4b29      	ldr	r3, [pc, #164]	; (8001608 <HAL_RCC_ClockConfig+0x238>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2201      	movs	r2, #1
 8001568:	4393      	bics	r3, r2
 800156a:	0019      	movs	r1, r3
 800156c:	4b26      	ldr	r3, [pc, #152]	; (8001608 <HAL_RCC_ClockConfig+0x238>)
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001574:	4b24      	ldr	r3, [pc, #144]	; (8001608 <HAL_RCC_ClockConfig+0x238>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2201      	movs	r2, #1
 800157a:	4013      	ands	r3, r2
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d001      	beq.n	8001586 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e03c      	b.n	8001600 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2204      	movs	r2, #4
 800158c:	4013      	ands	r3, r2
 800158e:	d009      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001590:	4b1e      	ldr	r3, [pc, #120]	; (800160c <HAL_RCC_ClockConfig+0x23c>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	4a1f      	ldr	r2, [pc, #124]	; (8001614 <HAL_RCC_ClockConfig+0x244>)
 8001596:	4013      	ands	r3, r2
 8001598:	0019      	movs	r1, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68da      	ldr	r2, [r3, #12]
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_RCC_ClockConfig+0x23c>)
 80015a0:	430a      	orrs	r2, r1
 80015a2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2208      	movs	r2, #8
 80015aa:	4013      	ands	r3, r2
 80015ac:	d00a      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <HAL_RCC_ClockConfig+0x23c>)
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	4a19      	ldr	r2, [pc, #100]	; (8001618 <HAL_RCC_ClockConfig+0x248>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	0019      	movs	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	00da      	lsls	r2, r3, #3
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <HAL_RCC_ClockConfig+0x23c>)
 80015c0:	430a      	orrs	r2, r1
 80015c2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015c4:	f000 f82e 	bl	8001624 <HAL_RCC_GetSysClockFreq>
 80015c8:	0001      	movs	r1, r0
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_RCC_ClockConfig+0x23c>)
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	091b      	lsrs	r3, r3, #4
 80015d0:	220f      	movs	r2, #15
 80015d2:	4013      	ands	r3, r2
 80015d4:	4a11      	ldr	r2, [pc, #68]	; (800161c <HAL_RCC_ClockConfig+0x24c>)
 80015d6:	5cd3      	ldrb	r3, [r2, r3]
 80015d8:	000a      	movs	r2, r1
 80015da:	40da      	lsrs	r2, r3
 80015dc:	4b10      	ldr	r3, [pc, #64]	; (8001620 <HAL_RCC_ClockConfig+0x250>)
 80015de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80015e0:	250b      	movs	r5, #11
 80015e2:	197c      	adds	r4, r7, r5
 80015e4:	2000      	movs	r0, #0
 80015e6:	f7ff f847 	bl	8000678 <HAL_InitTick>
 80015ea:	0003      	movs	r3, r0
 80015ec:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80015ee:	197b      	adds	r3, r7, r5
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80015f6:	230b      	movs	r3, #11
 80015f8:	18fb      	adds	r3, r7, r3
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	e000      	b.n	8001600 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	0018      	movs	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	b004      	add	sp, #16
 8001606:	bdb0      	pop	{r4, r5, r7, pc}
 8001608:	40022000 	.word	0x40022000
 800160c:	40021000 	.word	0x40021000
 8001610:	00001388 	.word	0x00001388
 8001614:	fffff8ff 	.word	0xfffff8ff
 8001618:	ffffc7ff 	.word	0xffffc7ff
 800161c:	0800179c 	.word	0x0800179c
 8001620:	20000000 	.word	0x20000000

08001624 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800162a:	4b3b      	ldr	r3, [pc, #236]	; (8001718 <HAL_RCC_GetSysClockFreq+0xf4>)
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	220c      	movs	r2, #12
 8001634:	4013      	ands	r3, r2
 8001636:	2b08      	cmp	r3, #8
 8001638:	d00e      	beq.n	8001658 <HAL_RCC_GetSysClockFreq+0x34>
 800163a:	2b0c      	cmp	r3, #12
 800163c:	d00f      	beq.n	800165e <HAL_RCC_GetSysClockFreq+0x3a>
 800163e:	2b04      	cmp	r3, #4
 8001640:	d157      	bne.n	80016f2 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001642:	4b35      	ldr	r3, [pc, #212]	; (8001718 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2210      	movs	r2, #16
 8001648:	4013      	ands	r3, r2
 800164a:	d002      	beq.n	8001652 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800164c:	4b33      	ldr	r3, [pc, #204]	; (800171c <HAL_RCC_GetSysClockFreq+0xf8>)
 800164e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001650:	e05d      	b.n	800170e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8001652:	4b33      	ldr	r3, [pc, #204]	; (8001720 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001654:	613b      	str	r3, [r7, #16]
      break;
 8001656:	e05a      	b.n	800170e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001658:	4b32      	ldr	r3, [pc, #200]	; (8001724 <HAL_RCC_GetSysClockFreq+0x100>)
 800165a:	613b      	str	r3, [r7, #16]
      break;
 800165c:	e057      	b.n	800170e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	0c9b      	lsrs	r3, r3, #18
 8001662:	220f      	movs	r2, #15
 8001664:	4013      	ands	r3, r2
 8001666:	4a30      	ldr	r2, [pc, #192]	; (8001728 <HAL_RCC_GetSysClockFreq+0x104>)
 8001668:	5cd3      	ldrb	r3, [r2, r3]
 800166a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	0d9b      	lsrs	r3, r3, #22
 8001670:	2203      	movs	r2, #3
 8001672:	4013      	ands	r3, r2
 8001674:	3301      	adds	r3, #1
 8001676:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001678:	4b27      	ldr	r3, [pc, #156]	; (8001718 <HAL_RCC_GetSysClockFreq+0xf4>)
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	025b      	lsls	r3, r3, #9
 8001680:	4013      	ands	r3, r2
 8001682:	d00f      	beq.n	80016a4 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001684:	68b9      	ldr	r1, [r7, #8]
 8001686:	000a      	movs	r2, r1
 8001688:	0152      	lsls	r2, r2, #5
 800168a:	1a52      	subs	r2, r2, r1
 800168c:	0193      	lsls	r3, r2, #6
 800168e:	1a9b      	subs	r3, r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	185b      	adds	r3, r3, r1
 8001694:	025b      	lsls	r3, r3, #9
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	0018      	movs	r0, r3
 800169a:	f7fe fd35 	bl	8000108 <__udivsi3>
 800169e:	0003      	movs	r3, r0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	e023      	b.n	80016ec <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80016a4:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <HAL_RCC_GetSysClockFreq+0xf4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2210      	movs	r2, #16
 80016aa:	4013      	ands	r3, r2
 80016ac:	d00f      	beq.n	80016ce <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80016ae:	68b9      	ldr	r1, [r7, #8]
 80016b0:	000a      	movs	r2, r1
 80016b2:	0152      	lsls	r2, r2, #5
 80016b4:	1a52      	subs	r2, r2, r1
 80016b6:	0193      	lsls	r3, r2, #6
 80016b8:	1a9b      	subs	r3, r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	185b      	adds	r3, r3, r1
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	0018      	movs	r0, r3
 80016c4:	f7fe fd20 	bl	8000108 <__udivsi3>
 80016c8:	0003      	movs	r3, r0
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	e00e      	b.n	80016ec <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80016ce:	68b9      	ldr	r1, [r7, #8]
 80016d0:	000a      	movs	r2, r1
 80016d2:	0152      	lsls	r2, r2, #5
 80016d4:	1a52      	subs	r2, r2, r1
 80016d6:	0193      	lsls	r3, r2, #6
 80016d8:	1a9b      	subs	r3, r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	185b      	adds	r3, r3, r1
 80016de:	029b      	lsls	r3, r3, #10
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	0018      	movs	r0, r3
 80016e4:	f7fe fd10 	bl	8000108 <__udivsi3>
 80016e8:	0003      	movs	r3, r0
 80016ea:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	613b      	str	r3, [r7, #16]
      break;
 80016f0:	e00d      	b.n	800170e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <HAL_RCC_GetSysClockFreq+0xf4>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	0b5b      	lsrs	r3, r3, #13
 80016f8:	2207      	movs	r2, #7
 80016fa:	4013      	ands	r3, r2
 80016fc:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	3301      	adds	r3, #1
 8001702:	2280      	movs	r2, #128	; 0x80
 8001704:	0212      	lsls	r2, r2, #8
 8001706:	409a      	lsls	r2, r3
 8001708:	0013      	movs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
      break;
 800170c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800170e:	693b      	ldr	r3, [r7, #16]
}
 8001710:	0018      	movs	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	b006      	add	sp, #24
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40021000 	.word	0x40021000
 800171c:	003d0900 	.word	0x003d0900
 8001720:	00f42400 	.word	0x00f42400
 8001724:	007a1200 	.word	0x007a1200
 8001728:	080017ac 	.word	0x080017ac

0800172c <__libc_init_array>:
 800172c:	b570      	push	{r4, r5, r6, lr}
 800172e:	2600      	movs	r6, #0
 8001730:	4d0c      	ldr	r5, [pc, #48]	; (8001764 <__libc_init_array+0x38>)
 8001732:	4c0d      	ldr	r4, [pc, #52]	; (8001768 <__libc_init_array+0x3c>)
 8001734:	1b64      	subs	r4, r4, r5
 8001736:	10a4      	asrs	r4, r4, #2
 8001738:	42a6      	cmp	r6, r4
 800173a:	d109      	bne.n	8001750 <__libc_init_array+0x24>
 800173c:	2600      	movs	r6, #0
 800173e:	f000 f821 	bl	8001784 <_init>
 8001742:	4d0a      	ldr	r5, [pc, #40]	; (800176c <__libc_init_array+0x40>)
 8001744:	4c0a      	ldr	r4, [pc, #40]	; (8001770 <__libc_init_array+0x44>)
 8001746:	1b64      	subs	r4, r4, r5
 8001748:	10a4      	asrs	r4, r4, #2
 800174a:	42a6      	cmp	r6, r4
 800174c:	d105      	bne.n	800175a <__libc_init_array+0x2e>
 800174e:	bd70      	pop	{r4, r5, r6, pc}
 8001750:	00b3      	lsls	r3, r6, #2
 8001752:	58eb      	ldr	r3, [r5, r3]
 8001754:	4798      	blx	r3
 8001756:	3601      	adds	r6, #1
 8001758:	e7ee      	b.n	8001738 <__libc_init_array+0xc>
 800175a:	00b3      	lsls	r3, r6, #2
 800175c:	58eb      	ldr	r3, [r5, r3]
 800175e:	4798      	blx	r3
 8001760:	3601      	adds	r6, #1
 8001762:	e7f2      	b.n	800174a <__libc_init_array+0x1e>
 8001764:	080017b8 	.word	0x080017b8
 8001768:	080017b8 	.word	0x080017b8
 800176c:	080017b8 	.word	0x080017b8
 8001770:	080017bc 	.word	0x080017bc

08001774 <memset>:
 8001774:	0003      	movs	r3, r0
 8001776:	1812      	adds	r2, r2, r0
 8001778:	4293      	cmp	r3, r2
 800177a:	d100      	bne.n	800177e <memset+0xa>
 800177c:	4770      	bx	lr
 800177e:	7019      	strb	r1, [r3, #0]
 8001780:	3301      	adds	r3, #1
 8001782:	e7f9      	b.n	8001778 <memset+0x4>

08001784 <_init>:
 8001784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800178a:	bc08      	pop	{r3}
 800178c:	469e      	mov	lr, r3
 800178e:	4770      	bx	lr

08001790 <_fini>:
 8001790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001796:	bc08      	pop	{r3}
 8001798:	469e      	mov	lr, r3
 800179a:	4770      	bx	lr
